DESCRIPTION

Help a leading mobile brand understand the voice of the customer by analyzing the reviews of their product on Amazon and the topics that customers are talking about. You will perform topic modeling on specific parts of speech. Youâ€™ll finally interpret the emerging topics.

Problem Statement:

A popular mobile phone brand, Lenovo has launched their budget smartphone in the Indian market. The client wants to understand the VOC (voice of the customer) on the product. This will be useful to not just evaluate the current product, but to also get some direction for developing the product pipeline. The client is particularly interested in the different aspects that customers care about. Product reviews by customers on a leading e-commerce site should provide a good view.

#code

import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import string
from gensim import corpora, models
from gensim.models import CoherenceModel

# Read the CSV file
df = pd.read_csv("K8 Reviews v0.2.csv")

# Take a look at the top few records
print(df.head())
   
df['review'] = df['review'].str.lower()

# Extract the review text into a list
review_list = df['review'].tolist()

# Tokenize the reviews
tokenized_reviews = [word_tokenize(review) for review in review_list]
# Perform parts-of-speech tagging on each sentence
pos_tagged_reviews = [pos_tag(tokens) for tokens in tokenized_reviews]

# Define the noun POS tags
noun_tags = ['NN', 'NNS', 'NNP', 'NNPS']

# Filter terms based on POS tags corresponding to nouns
filtered_reviews = []
for review in pos_tagged_reviews:
    filtered_review = [word for word, pos in review if pos in noun_tags]
    filtered_reviews.append(filtered_review)
# Lemmatize the terms
lemmatizer = WordNetLemmatizer()
lemmatized_reviews = [[lemmatizer.lemmatize(word) for word in review] for review in filtered_reviews]

# Remove stopwords and punctuation
stopword_set = set(stopwords.words('english'))
punctuation_set = set(string.punctuation)
cleaned_reviews = []
for review in lemmatized_reviews:
    cleaned_review = [word for word in review if word not in stopword_set and word not in punctuation_set]
    cleaned_reviews.append(cleaned_review)
# Create a dictionary representation of the documents
dictionary = corpora.Dictionary(cleaned_reviews)

# Create a document-term matrix
doc_term_matrix = [dictionary.doc2bow(review) for review in cleaned_reviews]

# Create the LDA model
num_topics = 12
lda_model = models.LdaModel(corpus=doc_term_matrix, id2word=dictionary, num_topics=num_topics, random_state=42)

# Print out the top terms for each topic
for topic_id in range(num_topics):
    print(f"Topic {topic_id + 1}:")
    topic_terms = lda_model.get_topic_terms(topic_id, topn=10)
    topic_terms = [dictionary.id2token[term_id] for term_id, _ in topic_terms]
    print(', '.join(topic_terms))
    print()


# Compute coherence with c_v metric
coherence_model = CoherenceModel(model=lda_model, texts=cleaned_reviews, dictionary=dictionary, coherence='c_v')
coherence = coherence_model.get_coherence()
print(f"Coherence Score: {coherence}")

# Analyze the topics through the business lens, interpret the topics, and name them
topic_names = {
    0: "Customer Service",
    1: "Product Quality",
    2: "Delivery Experience",
    3: "Value for Money",
    4: "User Interface",
    5: "Product Features",
    6: "Shipping",
    7: "Return and Refund"}

# Create a table with the topic name and the top 10 terms in each to present to the business
topics_table = pd.DataFrame(columns=['Topic Name', 'Top 10 Terms'])
for topic_id in range(num_topics):
    if topic_id in topic_names:
        topic_terms = lda_model.get_topic_terms(topic_id, topn=10)
        topic_terms = [dictionary.id2token[term_id] for term_id, _ in topic_terms]
        topics_table = topics_table.append({'Topic Name': topic_names[topic_id], 'Top 10 Terms': ', '.join(topic_terms)},
                                           ignore_index=True)

# Print the table
print(topics_table)
            
 
